Git and GitHub
Version Control 

Git Commands
Clone 
add
commit
push
pull 


Readme.md 

git --version

==>Get-ChildItem -Force (to see hidden items in the directory using command prompt)

==> git status
for seeing what was added or modidifed in the folder 

==>git add . (means to add all the files edited and created)
or you can give all the files 
ex : git add index.html 

==>git commit -m "1.Added index.html" -m "2.some description"
1.for the message 
2. description 

==> git push 

==>ssh-keygen -t rsa -b 4096 -C "smittandel2401@gmail.com"
Generates an SSH key pair for secure authentication.

Breakdown:
ssh-keygen → Command to generate an SSH key
-t rsa → Uses the RSA algorithm
-b 4096 → Creates a 4096-bit key (stronger encryption)
-C "smittandel2401@gmail.com" → Adds a comment


==>dir /b | findstr "testkey"
to find the keys 
output 2 keys 
testkey (Have it as a secret)
testkey.pub

==>type filename.txt
(it is used to print the content of the file)

==>clip < testkey.pub

#After Creating the SSh key to connect it with the ssh agent 
==>(In Windows Powershell as Admin)
==># Ensure the ssh-agent service starts manually
Get-Service -Name ssh-agent | Set-Service -StartupType Manual

# Start the ssh-agent
Start-Service ssh-agent(Replace YOU with your actual Windows username.)
==>ssh-add C:/Users/YOU/.ssh/testkey
==>notepad C:/Users/YOU/.ssh/testkey.pub
==>ssh -T git@github.com(Test the SSh COnnection)


# if you donot have a git repository then 
==> git init 

==> using it instead of git add origin 
git remote add origin "link of the repo"
if the repository is not pulled from the github

==> git remote -v (check the repo)

==>git push -u origin master(-u is used if in future me donot need to write origin master)

==>git branch (to check the branches in the code)

==>git checkout -b feature-notes-branch
(it is used to create and switch between branches)

==>git branch -d feature-notes-branch
(it is used to delete a branch )

==>git commit -am "message"(You add and commit at the same time but can only be done for the file which was in the midified condition and not for the newly created file)

==>git reset (unstage a file)

==>git reset HEAD~1(undo the recent commit that is first)

==>git log (to see the series of commit we have done )
it will have a uid/ address if we have to go back to that certain commit then we have to us e

==> git reset "UID"(then it unstages all the changes done on the commit)
git reset --hard "UID" (will comeletely reset to  that commit not unstage it)

[Forking]

